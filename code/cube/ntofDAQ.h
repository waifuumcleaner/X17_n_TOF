/*
 * utility classes and methods to manage the ntof DAQ root files and correlate ntof data with fers and srs DAQ
 */

#ifndef NTOFDAQ_H
#define NTOFDAQ_H

#include <TFile.h>
#include <TString.h>
#include <TSystem.h>
#include <TTree.h>
#include <iomanip>
#include <iostream>

/**
 * @brief
 * Searches parameter from formatted text file, in lines beginning with "# "; e.g. # This parameter = val1 val2 val3
 *
 * @return
 * String containing value at the given position (starting from 0) after the "="
 */
TString getSPar(TString parname, Int_t idx, TString inFile, TString defval = "-1");

Float_t getFPar(TString parname, Int_t idx, TString inFile, Float_t defval = -1);

Int_t getIPar(TString parname, Int_t idx, TString inFile, Int_t defval = -1);

Long64_t getLPar(TString parname, Int_t idx, TString inFile, Long64_t defval = -1);

/**
 * @brief
 * Converts string time. From: https://stackoverflow.com/questions/17681439/convert-string-time-to-unix-timestamp
 *
 * @return
 * Seconds since epoch of the provided time string
 */
std::time_t convertTime(TString stime);

/**
 * @return
 * Date and time in "ntof" format : two integers as date (1YYMMDD), time (mmhhss)
 */
int *convert2DateTime(TString stime);

/**
 * @brief
 * Class that reads the "summary" NTOF root file generated by ntofData.cpp::ntofData() method from the ntof root file provided by Riccardo (for CERN Oct 2023 tests).
 * If file is not available, returns "default -1" values.
 *
 */
class manageNTOF {
  private:
    int centry; // current entry (last searched)

    int bdate;
    int btime;
    Long64_t butime;
    float bpulse;

    Long64_t start_time; // unix time - start of run
    TFile *fin;
    TTree *reader;
    Long64_t nentries;

  public:
    manageNTOF(TString filepath);

    ~manageNTOF();

    void setStartDaTi(Long64_t udatetime);

    /**
     * @brief TIME CONSUMING, need improvement. Searches for the time closest entry in the nTOF tree and returns the pulse intensity.
     * current_us : fers/srs us timing
     *
     * @param current_us : trigger time to be searched in NTOF dats
     * @param dtc_s: max time difference in sec between correlated trigger timing
     *
     * @return
     * v[0] : pulse intensity frop PUK;
     * v[1] : time difference between ntof and calling value in sec
     */
    std::vector<float> getBeamPulse(float current_us, float dtc_s = 1);

    int matchedEntry(); // return last matched entry
};

#endif
